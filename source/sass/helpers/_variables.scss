$color-main: #e31b6d;
$color-lpink: #fff5f6;
$color-lblue: #e9f9ff;
$color-white: #ffffff;
$color-bla: #1d1d1d;
$color-lgray: #EEEEEE;
$color-gray: #666666;

$bg-main: #2a2a2a;

$default-grid-columns: 12;
$default-grid-gutter: 30;

$breakpoints: (
  xs: 0,
  // Small screen / phone
  sm: 576px,
  // Medium screen / tablet
  md: 768px,
  // Large screen / desktop
  lg: 992px,
  // Extra large screen / wide desktop
  xl: 1200px,
  // Extra extra large
  xxl: 1400px
);

$container-sizes: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px,
  xxl: 1240px
);

$column-sizes: (
  sm: 576,
  md: 768,
  lg: 992,
  xl: 1200,
  xxl: 1400
);

@mixin min($bp, $max: "null", $device: "screen") {
  @if $max == "null" {
    @media only #{$device} and (min-width: #{$bp}) {
      @content;
    }
  } @else {
    @media only #{$device} and (min-width: #{$bp}) and (max-width: #{$max}) {
      @content;
    }
  }
}

@function bp($bp) {
  @return map-get($breakpoints, $bp);
}
@function container($container-size, $true-val: false) {
  @return map-get($container-sizes, $container-size);
}
@each $bp, $container-size in $container-sizes {
  .container-#{$bp} {
    margin: 0 auto;
    padding-right: 1rem;
    padding-left: 1rem;
    width: 100%;

    $i: index($container-sizes, $bp $container-size);

    @for $j from $i through length($container-sizes) {
      @include min(#{bp(nth(nth($container-sizes, $j), 1))}) {
        max-width: container(#{nth(nth($container-sizes, $j), 1)});
      }
    }
  }
}
